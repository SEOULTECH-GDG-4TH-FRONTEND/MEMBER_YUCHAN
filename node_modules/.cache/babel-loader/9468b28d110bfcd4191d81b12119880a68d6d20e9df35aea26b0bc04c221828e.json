{"ast":null,"code":"var _jsxFileName = \"/Users/master/MEMBER_YUCHAN/gdg_project/src/App.jsx\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport styled from \"styled-components\";\nimport ProfileCard from \"./components/ProfileCard\";\nimport { useAuth } from \"./context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getAllUsers } from \"./apis/user\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 50px 85px;\n    flex-direction: column;\n`;\n_c = Wrapper;\nconst Title = styled.div`\n    font-size: 32px;\n    color: #454545;\n    font-weight: 700;\n`;\n_c2 = Title;\nconst CardWrapper = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 30px;\n    margin-top: 30px;\n`;\n_c3 = CardWrapper;\nfunction App() {\n  _s();\n  const {\n    isLoggedIn\n  } = useAuth();\n  const navigate = useNavigate();\n  const [profiles, setProfiles] = useState([]);\n  useEffect(() => {\n    if (!isLoggedIn) {\n      navigate(\"/login\");\n    }\n  }, [isLoggedIn, navigate]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const data = await getAllUsers();\n        setProfiles(data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"\\uD83D\\uDE4B\\uD83C\\uDFFB \\uB204\\uAD6C\\uC5D0\\uAC8C \\uC9C8\\uBB38\\uD560\\uAE4C\\uC694?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardWrapper, {\n        children: profiles.map(profile => /*#__PURE__*/_jsxDEV(ProfileCard, {\n          id: profile.id,\n          name: profile.username,\n          bio: profile.bio,\n          questionCount: profile.receivedQuestionCount,\n          onClick: () => navigate(\"/question\", {\n            state: {\n              user: profile\n            }\n          })\n        }, profile.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"DWBdxXh4cOAoIRbj1uTWkWv2tx8=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"CardWrapper\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["Navbar","styled","ProfileCard","useAuth","useNavigate","useEffect","useState","getAllUsers","jsxDEV","_jsxDEV","Fragment","_Fragment","Wrapper","div","_c","Title","_c2","CardWrapper","_c3","App","_s","isLoggedIn","navigate","profiles","setProfiles","fetchData","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","profile","id","name","username","bio","questionCount","receivedQuestionCount","onClick","state","user","_c4","$RefreshReg$"],"sources":["/Users/master/MEMBER_YUCHAN/gdg_project/src/App.jsx"],"sourcesContent":["import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport styled from \"styled-components\";\nimport ProfileCard from \"./components/ProfileCard\";\nimport { useAuth } from \"./context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getAllUsers } from \"./apis/user\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 50px 85px;\n    flex-direction: column;\n`;\n\nconst Title = styled.div`\n    font-size: 32px;\n    color: #454545;\n    font-weight: 700;\n`;\n\nconst CardWrapper = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 30px;\n    margin-top: 30px;\n`;\n\nfunction App() {\n    const { isLoggedIn } = useAuth();\n    const navigate = useNavigate();\n    const [profiles, setProfiles] = useState([]);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            navigate(\"/login\");\n        }\n    }, [isLoggedIn, navigate]);\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const data = await getAllUsers();\n                setProfiles(data);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\n        fetchData();\n    }, []);\n\n    return (\n        <>\n            <Navbar />\n            <Wrapper>\n                <Title>🙋🏻 누구에게 질문할까요?</Title>\n                <CardWrapper>\n                    {profiles.map((profile) => (\n                        <ProfileCard\n                            key={profile.id}\n                            id={profile.id}\n                            name={profile.username}\n                            bio={profile.bio}\n                            questionCount={profile.receivedQuestionCount}\n                            onClick={() =>\n                                navigate(\"/question\", {\n                                    state: { user: profile },\n                                })\n                            }\n                        />\n                    ))}\n                </CardWrapper>\n            </Wrapper>\n        </>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}